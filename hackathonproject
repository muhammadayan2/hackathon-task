{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "a55abbdd-2dd9-4eac-bee3-18cda8b7ce78",
   "metadata": {},
   "outputs": [],
   "source": [
    "class BankAccount:\n",
    "    def _init_(self, account_number, account_holder):\n",
    "        self.account_number = account_number\n",
    "        self.account_holder = account_holder\n",
    "        self.balance = 0\n",
    "        self.transactions = []\n",
    "\n",
    "    def deposit(self, amount):\n",
    "        self.balance += amount\n",
    "        self.transactions.append(f\"Deposited: {amount}\")\n",
    "        print(f\"{amount} deposited successfully.\")\n",
    "\n",
    "    def withdraw(self, amount):\n",
    "        if amount > self.balance:\n",
    "            print(\"Insufficient balance!\")\n",
    "        else:\n",
    "            self.balance -= amount\n",
    "            self.transactions.append(f\"Withdrew: {amount}\")\n",
    "            print(f\"{amount} withdrawn successfully.\")\n",
    "\n",
    "    def check_balance(self):\n",
    "        print(f\"Current balance: {self.balance}\")\n",
    "\n",
    "    def add_transaction(self, description):\n",
    "        self.transactions.append(description)\n",
    "\n",
    "    def print_statement(self):\n",
    "        print(\"Transaction Statement:\")\n",
    "        for transaction in self.transactions:\n",
    "            print(transaction)\n",
    "\n",
    "\n",
    "class Bank:\n",
    "    def _init_(self):\n",
    "        self.accounts = {}\n",
    "        self.next_account_number = 1001\n",
    "\n",
    "    def open_account(self, account_holder):\n",
    "        account = BankAccount(self.next_account_number, account_holder)\n",
    "        self.accounts[self.next_account_number] = account\n",
    "        print(f\"Account created successfully! Account Number: {self.next_account_number}\")\n",
    "        self.next_account_number += 1\n",
    "\n",
    "    def get_account(self, account_number):\n",
    "        return self.accounts.get(account_number, None)\n",
    "\n",
    "    def transfer(self, sender_account_number, receiver_account_number, amount):\n",
    "        sender = self.get_account(sender_account_number)\n",
    "        receiver = self.get_account(receiver_account_number)\n",
    "\n",
    "        if sender and receiver:\n",
    "            if sender.balance >= amount:\n",
    "                sender.withdraw(amount)\n",
    "                receiver.deposit(amount)\n",
    "                print(f\"Transferred {amount} from Account {sender_account_number} to {receiver_account_number}.\")\n",
    "            else:\n",
    "                print(\"Insufficient balance for transfer.\")\n",
    "        else:\n",
    "            print(\"One or both account numbers are invalid.\")\n",
    "\n",
    "    def admin_check_total_deposit(self):\n",
    "        total = sum(account.balance for account in self.accounts.values())\n",
    "        print(f\"Total deposits in the bank: {total}\")\n",
    "\n",
    "    def admin_check_total_accounts(self):\n",
    "        print(f\"Total number of accounts in the bank: {len(self.accounts)}\")\n",
    "\n",
    "\n",
    "#Example Usage\n",
    "bank = Bank()\n",
    "\n",
    "# Open accounts\n",
    "bank.open_account(\"Alice\")\n",
    "bank.open_account(\"Bob\")\n",
    "\n",
    "# Deposit money\n",
    "account = bank.get_account(1001)\n",
    "if account:\n",
    "    account.deposit(500)\n",
    "\n",
    "account = bank.get_account(1002)\n",
    "if account:\n",
    "    account.deposit(1000)\n",
    "\n",
    "# Transfer money\n",
    "bank.transfer(1001, 1002, 200)\n",
    "\n",
    "# Admin Operations\n",
    "bank.admin_check_total_deposit()\n",
    "bank.admin_check_total_accounts()\n",
    "\n",
    "# Print statement\n",
    "account = bank.get_account(1001)\n",
    "if account:\n",
    "    account.print_statement()"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
